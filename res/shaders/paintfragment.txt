#version 410 core

// Interpolated values from the vertex shaders
in vec2 fUV;

// Ouput data
out vec3 color;

// Values that stay constant for the whole mesh.

uniform isampler2D tex;
uniform float zoom;
uniform vec2 colmap;
uniform ivec4 params;


int maxI = params.x;
int res = params.y;
int width = params.z;
int height = params.w;

vec3 rainbow(float c)
{
    float seg = floor(fract(c)*8);
    float sub = fract(c*8);
    if (seg < 2.0) return vec3(1.0-seg/2.0-sub/2.0,1.0-seg/2.0-sub/2.0,1.0-seg/2.0-sub/2.0);
    if (seg < 3.0) return vec3(0.0,0.0,sub);
    if (seg < 4.0) return vec3(0.0,sub, 1.0-sub);
    if (seg < 5.0) return vec3(sub, 1.0-sub, sub);
    if (seg < 6.0) return vec3(1.0,0.0,1.0-sub);
    if (seg < 7.0) return vec3(1.0, sub, 0.0);
    return vec3(1.0,1.0,sub);

}

vec3 iter2col(int iter) {
	float r = log((float(iter)))/log((float(maxI)));
    return rainbow(colmap.x + r*colmap.y);
}

void main(){
    ivec2 UV = ivec2(width/2/res + (gl_FragCoord.x - width/2)/res/zoom, height/2/res + (gl_FragCoord.y - height/2)/res/zoom) * res;

    // Output color = color of the texture at the specified UV
    int itCount = texelFetch(tex, UV, 0).r;
    vec3 c = vec3(0.3,0.3,0.0);
    if (itCount == -1)
        c = vec3(0.3,0.0,0.3);
    if (itCount == 0)
        c = vec3(0.0,0.0, 0.0);
    if (itCount >= 1)
        c = iter2col(itCount);
    color = c;
}